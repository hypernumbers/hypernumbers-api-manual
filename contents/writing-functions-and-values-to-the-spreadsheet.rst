============================
Writing Functions And Values
============================

Introduction
------------

There are two different ways to write data to the spreadsheet.

The first is to write directly to cells.

The second is to append a row to a spreadsheet page.

Both of these different modes are supported by different types of API keys.

It is possible to create an API key that only has append permissions so that it can never overwrite data.

Details of the different API key attributes are described in the section on `Types Of API Keys`_.

=========================
Writing Directly To Cells
=========================

The following API call will write a function to a cell or range of cells.

Your call to the API should use **all** of the headers, **one** of the body examples and **one** type of URL

.. tabularcolumns:: |l|L|

=========== ================================================================
Component   Details
=========== ================================================================
Method      ``POST``

Headers     ``{"Accept", "application/json"}``

            ``{"Content-MD5", MD5 hash sum of body}``

            ``{"Authorization", generated by api client library}``

Body        ``{"set": {"formula": "333"}}``

            ``{"set": {"formula": "3.33"}}``

            ``{"set": {"formula": "3.33e+33"}}``

            ``{"set": {"formula": "'333"}}``

            ``{"set": {"formula": "abc"}}``

            ``{"set": {"formula": "ab\"c"}}``

            ``{"set": {"formula": "true"}}``

            ``{"set": {"formula": "#REF!"}}``

            ``{"set": {"formula": "=1+2"}}``

            ``{"set": {"formula": "'=1+2"}}``

            ``{"set": {"formula": "1/2/3"}}``

            ``{"clear": "contents"}``

            ``{"clear": "all"}``

Permissions ``normal`` or ``admin``

Cells       ``http://example.com/some/page/b7``

Ranges      ``http://example.com/some/page/b7:b9``
=========== ================================================================

Notes
-----

All constants are passed in as a formula and all formula are strings. The formula string should appear exactly as you would type it into a cell.

If you wish to put double quotes in a string it must be escaped with a single backslash.

If you attempt to pass in integers, floats of booleans in as native data types your request will fail:

Right way:

.. code-block:: javascript

    {"set": {"formula": "333"}}

    {"set": {"formula": "3.33"}}

    {"set": {"formula": "true"}}

Wrong way:

.. code-block:: javascript

    {"set": {"formula": 333}}

    {"set": {"formula": 3.33}}

    {"set": {"formula": true}}

Forcing Strings
---------------

All formulae can be escaped to a string by starting them with a smart quote - exactly as in the GUI:

.. code-block:: javascript

    {"set": {"formula": "'=1+2+3"}}

This will evaluate to the string ``=1+2+3`` and not to the value ``6``.

Strings that look like dates will resolve to dates as in the GUI.

Inputting HTML
--------------

The security model allows spreadsheet users to put arbitrary html into cells **if the formula starts with an opening** ``<``.

Consider the following:

.. code-block:: javascript

    {"set": {"formula": "<h1>Hey!</h1>"}}

This will resolve to the HTML fragment ``<h1>Hey!</h1>``.

By contrast the following:

.. code-block:: javascript

    {"set": {"formula": "Hey! <h1>Hey!</h1>"}}

    {"set": {"formula": "'<h1>Hey!</h1>"}}


These will resolve to ``Hey! &lt;Hey!&gt;`` and ``'&lt;Hey!&gt;`` respectively.

.. Note::

     If a cell is made user editable on a wiki page as an input cell the input is automatically escaped - effectively the same as sharp quoting all formulae. Wiki users cannot enter either formulae or html into a cell - only string, integers, floating point numbers, booleans and errors.

Clearing Cells
--------------

Cells can be cleared of their formula using the ``clear`` api call. The ``contents`` variant clears the formula but not the cell and special formats. The ``all`` option clears both the formula and the cell and special formats.

Writing Arrays
--------------

Specifying a single formula on a range url will write that formula to every cell in the range.

If you wish to write a range of formulae that rewrite to offset by a row as you go down you can write the first cell using this API and then use either the **drag and drop** or the **copy** API calls. This will enable you to emulate the normal user way of entering ranged formula.

You can also write complete arrays of formulae using the array version of this API with a range formula:

=========== ===================================================================================
Component   Details
=========== ===================================================================================
Method      ``POST``

Headers     ``{"Accept", "application/json"}``

            ``{"Content-MD5", MD5 hash sum of body}``

            ``{"Authorization", generated by api client library}``

Body        ``{"set":{"formula":[["A1", "B1"],["A2", "B2"],["A3", "B3"]]}}``

Permissions ``normal`` or ``admin``

Range       ``http://example.com/some/page/A1:B3``
=========== ===================================================================================

The array of values is laid out in rows. If the two dimensional array of values is not congruent with the range described in the URL this request will return a ``401`` error.

If the value ``""`` is passed in an array like this **it will not be written** - the cell will be considered to be unwritten (or unwritten over). The purpose of this is to enable data that behaves correctly in the ``=countblank()`` function. If you wish to clear cells use the clear API.

=======================
Appending Data To Pages
=======================

The appending data API behaves similarly to the `form functionality`_ in the Vixo spreadsheet - unlike in the API appending forms in Vixo use `special functions`_

Note:: This is the **only** action that an append_only API key can execute. This type of key can be used to allow someone non-destructive access to add data to a system without risk of breaking anything else.

=========== ================================================================
Component   Details
=========== ================================================================
Method      ``POST``

Headers     ``{"Accept", "application/json"}``

            ``{"Content-MD5", MD5 hash sum of body}``

            ``{"Authorization", generated by api client library}``

Body        See below

Permissions ``normal`` or ``admin`` or ``appendonly``

Page        ``http://example.com/some/page/``
=========== ================================================================

An exploded example of the json to post is shown below:

.. code-block:: javascript

    {
        "append": {
            "values": [
                {
                    "formula": "",
                    "label": "Question 1:"
                },
                {
                    "formula": "",
                    "label": "Question 2:"
                },
                {
                    "formula": "",
                    "label": "Question 3:"
                },
                {
                    "formula": "",
                    "label": "Question 4:"
                }
            ]
        }
    }

The column ordering is as per the form functionality. The values are matched to the labels in row 1. If non-existent labels are posted, new labelled columns are appended to the right in the order in which the labels appear in the json.

.. _Types Of API Keys: ./types-api-keys.html

.. _form functionality: http://documentation.vixo.com/contents/indepth/making-forms.html?from=vixo-api-manual

.. _special functions: http://documentation.vixo.com/contents/vixo-functions/web-forms/introduction-to-form-functions.html?from=vixo-api-manual
